buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.6.1'
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.0.16'
    }
}

plugins {
    id 'eclipse'
    id 'java'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'net.kyori.blossom' version '1.3.1'
}

base {
    archivesName = mod_id
}

import proguard.gradle.ProGuardTask
group = 'dev.spaxter'
version = '1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    proguardConfig {
        canBeResolved = true
        canBeConsumed = false
    }
    pixelmonDownload // Configuración para descargar Pixelmon
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.izzel.io/releases' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url 'https://repo.repsy.io/mvn/pixelmon-repo/releases' }
    maven { url 'https://repo.codemc.io/repository/maven-public/' }
    maven { url 'https://maven.minecraftforge.net/' }
    flatDir { dirs "libs" }
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-Dmixin.env.disableRefMap=true'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {}
        server { args '--nogui' }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    // JARs locales
    implementation files('libs/Quests.jar')
    implementation files('libs/Pixelmon-1.16.5-9.1.12-server.jar')

    // Otras dependencias
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'io.izzel.arclight:arclight-forge-1.16:1.0.25:spigot'

    // Pixelmon para descarga automática
    pixelmonDownload 'com.pixelmonmod:pixelmon:1.16.5-9.1.12-server'
}

tasks.register('proguard', ProGuardTask) {
    dependsOn jar
    injars jar.archiveFile
    outjars "${buildDir}/libs/${base.archivesName.get()}-${version}-obfuscated.jar"

    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod"
    libraryjars configurations.runtimeClasspath

    configuration file('proguard.pro')
    printmapping "${buildDir}/proguard/mapping.txt"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
    options.failOnError = true
    options.compilerArgs << '-parameters'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filesMatching(['META-INF/mods.toml', 'plugin.yml']) {
        expand project.properties
    }
}

jar {
    manifest {
        attributes([
            'Specification-Title': mod_id,
            'Specification-Vendor': 'dev.spaxter',
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'dev.spaxter',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Tarea para descargar Pixelmon y guardarlo en libs
def pixelmonJar = 'Pixelmon-1.16.5-9.1.12-server.jar'

tasks.register('downloadPixelmonJar', Copy) {
    dependsOn configurations.pixelmonDownload
    from {
        configurations.pixelmonDownload.resolve()
    }
    into 'libs'
    rename { pixelmonJar }

    doFirst {
        println "Descargando Pixelmon..."
    }
    doLast {
        println "Pixelmon guardado en libs/${pixelmonJar}"
    }
}

// Hacer que la tarea build dependa de la descarga de Pixelmon
tasks.build.dependsOn tasks.downloadPixelmonJar
