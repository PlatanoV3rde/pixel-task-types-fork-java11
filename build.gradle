plugins {
    id 'eclipse'
    id 'java'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

group = 'dev.spaxter'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        url = 'https://repo.leonardobishop.com/releases/'
    }
    maven { 
        url = 'https://maven.izzel.io/releases'
    }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    flatDir {
        dirs "libs"
    }
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {}
        server {
            args '--nogui'
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:1.16.5-36.2.34"
    compileOnly 'com.pixelmonmod.api:Pixelmon:1.16.5-9.1.12-universal'
    compileOnly "org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT"
    compileOnly 'io.izzel.arclight:arclight-forge-1.16:1.0.25:spigot'
    compileOnly 'com.leonardobishop:quests:3.14.2'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
